/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.2/userguide/custom_plugins.html
 */

plugins {
    // Plugin publication plugin.
    id("com.gradle.plugin-publish") version "1.0.0"

    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    `java-gradle-plugin`

    `maven-publish`

    // Apply the Kotlin JVM plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "1.6.21"
}

group = "com.github.minigdx"
version = project.properties["version"] ?: "DEV-SNAPSHOT"
if(version == "unspecified") {
    version = "DEV-SNAPSHOT"
}
repositories {
    gradlePluginPortal()
    mavenCentral()
}

dependencies {
    // Align versions of all Kotlin components
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    implementation("org.jetbrains.kotlin.multiplatform:org.jetbrains.kotlin.multiplatform.gradle.plugin:1.6.21")
    implementation("org.jlleitschuh.gradle.ktlint:org.jlleitschuh.gradle.ktlint.gradle.plugin:11.0.0")
    implementation("org.jetbrains.dokka:org.jetbrains.dokka.gradle.plugin:1.6.21")

    implementation(platform("me.champeau.jdoctor:jdoctor-bom:0.1.2"))
    implementation("me.champeau.jdoctor:jdoctor-core")
    implementation("me.champeau.jdoctor:jdoctor-utils:0.1.2")

    // Use the Kotlin test library.
    testImplementation("org.jetbrains.kotlin:kotlin-test")

    // Use the Kotlin JUnit integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")
}

gradlePlugin {
    // Define the plugin
    val developer by plugins.creating {
        id = "com.github.minigdx.gradle.plugin.developer"
        implementationClass = "com.github.minigdx.gradle.plugin.MiniGdxDeveloperPlugin"
        displayName = "MiniGDX Developer plugin"
        description = """Configure MiniGDX libs with a common set of configuration and tasks.
                | The usage is mainly for MiniGDX contributors.
            """.trimMargin()
    }

    val mpp by plugins.creating {
        id = "com.github.minigdx.gradle.plugin.developer.mpp"
        implementationClass = "com.github.minigdx.gradle.plugin.MiniGdxKotlinMppPlugin"
        displayName = "MiniGDX Kotlin JVM Developer plugin"
        description = """Configure MiniGDX libs to build for the JVM only.
                | The usage is mainly for MiniGDX contributors.
            """.trimMargin()
    }

    val jvm by plugins.creating {
        id = "com.github.minigdx.gradle.plugin.developer.jvm"
        implementationClass = "com.github.minigdx.gradle.plugin.MiniGdxKotlinJvmPlugin"
        displayName = "MiniGDX Kotlin Multiplatform Developer plugin"
        description = """Configure MiniGDX libs to build for different platforms.
                | The usage is mainly for MiniGDX contributors.
            """.trimMargin()
    }
}

pluginBundle {
    website = "https://github.com/minigdx/minigdx-developer-gradle-plugin"
    vcsUrl = "https://github.com/minigdx/minigdx-developer-gradle-plugin"

    tags = listOf("minigdx", "developer")

    pluginTags = mapOf(
        "jvm" to listOf("kotlin", "jvm"),
        "mpp" to listOf("kotlin", "jvm", "mpp", "ios", "js", "android", "native")
    )
}

val compileKotlin: org.jetbrains.kotlin.gradle.tasks.KotlinCompile by tasks
compileKotlin.kotlinOptions.jvmTarget = "1.8"

// Add a source set for the functional test suite
val functionalTestSourceSet = sourceSets.create("functionalTest") {
}

gradlePlugin.testSourceSets(functionalTestSourceSet)
configurations["functionalTestImplementation"].extendsFrom(configurations["testImplementation"])

// Add a task to run the functional tests
val functionalTest by tasks.registering(Test::class) {
    testClassesDirs = functionalTestSourceSet.output.classesDirs
    classpath = functionalTestSourceSet.runtimeClasspath
}

tasks.check {
    // Run the functional tests as part of `check`
    dependsOn(functionalTest)
}

// Ensure "org.gradle.jvm.version" is set to "8" in Gradle metadata.
tasks.withType<JavaCompile> {
    sourceCompatibility = JavaVersion.VERSION_1_8.toString()
    targetCompatibility = JavaVersion.VERSION_1_8.toString()
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}

kotlin {
    jvmToolchain {
        (this as JavaToolchainSpec).languageVersion.set(JavaLanguageVersion.of(11))
    }
}
